
#[allow(unused)]
pub fn _p1(s: &str, low: f64, high: f64) -> usize {

    let mut count = 0;
    let mut pos_and_dir = Vec::new();

    for line in s.lines() {
        let mut split = line.split(" @ ");
        let mut pos_split = split.next().unwrap().split(", ");
        let mut dir_split = split.next().unwrap().split(", ");

        let x = pos_split.next().unwrap().trim().parse::<f64>().unwrap();
        let y = pos_split.next().unwrap().trim().parse::<f64>().unwrap();
        let z = pos_split.next().unwrap().trim().parse::<f64>().unwrap();

        let dx = dir_split.next().unwrap().trim().parse::<f64>().unwrap();
        let dy = dir_split.next().unwrap().trim().parse::<f64>().unwrap();
        let dz = dir_split.next().unwrap().trim().parse::<f64>().unwrap();

        pos_and_dir.push(((x, y, z), (dx, dy, dz)));
    }

    for (p1, pos_and_dir1) in pos_and_dir.iter().enumerate() {
        let (x1, y1, dx1, dy1) = (pos_and_dir1.0.0, pos_and_dir1.0.1, pos_and_dir1.1.0, pos_and_dir1.1.1);
        for (p2, pos_and_dir2) in pos_and_dir.iter().enumerate().skip(p1 + 1) {
            let (x2, y2, dx2, dy2) = (pos_and_dir2.0.0, pos_and_dir2.0.1, pos_and_dir2.1.0, pos_and_dir2.1.1);

            let x = x2 + (
                dx2 * (dy1*x1 - dy1 * x2 - dx1*y1 + dx1*y2) /
                    (dx2*dy1 - dx1*dy2)
                );

            let y = y1 + (
                dy1 * (x - x1) / dx1
                );

            let t1 = (x - x1) / dx1;

            let t2 = (dy1 *x1 - dy1 * x2 - dx1*y1 + dx1*y2) /
                (dx2*dy1 - dx1*dy2);

            let future_or_past = if t2 > 0.0 { "future" } else { "past" };

            if x == f64::INFINITY || y == f64::INFINITY {
                continue;
            }

            if x.is_nan() || y.is_nan() {
                continue;
            }

            if x == f64::NEG_INFINITY || y == f64::NEG_INFINITY {
                continue;
            }

            if (low..=high).contains(&x) && (low..=high).contains(&y) && t2 > 0.0 && t1 > 0.0 {
                count += 1;
            }
        }
    }

    count
}

#[allow(unused)]
pub fn p1() -> usize {
    _p1(include_str!("j24.txt"), 200000000000000f64, 400000000000000f64)
}

#[allow(unused)]
pub fn _p2(s: &str, test: bool) -> usize {

    let mut count = 0;
    let mut pos_and_dir = Vec::new();

    for line in s.lines() {
        let mut split = line.split(" @ ");
        let mut pos_split = split.next().unwrap().split(", ");
        let mut dir_split = split.next().unwrap().split(", ");

        let x = pos_split.next().unwrap().trim().parse::<f64>().unwrap();
        let y = pos_split.next().unwrap().trim().parse::<f64>().unwrap();
        let z = pos_split.next().unwrap().trim().parse::<f64>().unwrap();

        let dx = dir_split.next().unwrap().trim().parse::<f64>().unwrap();
        let dy = dir_split.next().unwrap().trim().parse::<f64>().unwrap();
        let dz = dir_split.next().unwrap().trim().parse::<f64>().unwrap();

        pos_and_dir.push(((x, y, z), (dx, dy, dz)));
    }

    println!("Solve[");
    for (id, pos_and_dir1) in pos_and_dir.iter().enumerate() {
        let (x, y, z, dx, dy, dz) = (pos_and_dir1.0.0, pos_and_dir1.0.1, pos_and_dir1.0.2, pos_and_dir1.1.0, pos_and_dir1.1.1, pos_and_dir1.1.2);

        println!("dx*t{id}+x=={dx}*t{id}+{x} &&");
        println!("dy*t{id}+y=={dy}*t{id}+{y} &&");
        println!("dz*t{id}+z=={dz}*t{id}+{z} &&");
        println!("t{id} >= 0 &&");
    }
    println!("0==0, {{");
    for (id, pos_and_dir1) in pos_and_dir.iter().enumerate() {
        print!("t{id}, ");
    }
    println!("x, dx, y, dy, z, dz}}, Integers]");

    // SOLVING THIS IN MATHEMATICA GIVES for the test input:
    // {{t0 -> 5, t1 -> 3, t2 -> 4, t3 -> 6, t4 -> 1, x -> 24, dx -> -3, y -> 13, dy -> 1, z -> 10, dz -> 2}}

    if test {
        return 24+13+10
    }

    // SOLVING THIS IN MATHEMATICA GIVES for the input:
    // {{t0 -> 132725062611, t1 -> 203007258383, t2 -> 408488334369,
    //     t3 -> 458123915740, t4 -> 658343734032, t5 -> 786715701574,
    //     t6 -> 142339038564, t7 -> 335298991162, t8 -> 428487725919,
    //     t9 -> 372841190768, t10 -> 72664960110, t11 -> 188244339670,
    //     t12 -> 829635834505, t13 -> 902883215877, t14 -> 605430855225,
    //     t15 -> 685697803846, t16 -> 1036479177249, t17 -> 482821231660,
    //     t18 -> 128669691367, t19 -> 139423410908, t20 -> 686527728208,
    //     t21 -> 916906482738, t22 -> 702070315794, t23 -> 466743451902,
    //     t24 -> 141470136705, t25 -> 285503969928, t26 -> 945372826812,
    //     t27 -> 690574710091, t28 -> 224581910876, t29 -> 691966981194,
    //     t30 -> 632781585730, t31 -> 505220633628, t32 -> 415560648168,
    //     t33 -> 875660582144, t34 -> 774978595538, t35 -> 1003399251777,
    //     t36 -> 279686324249, t37 -> 112074839685, t38 -> 948648010858,
    //     t39 -> 299369532611, t40 -> 61496446721, t41 -> 815339939938,
    //     t42 -> 749529122747, t43 -> 550989032173, t44 -> 478321715674,
    //     t45 -> 807853006928, t46 -> 463352196280, t47 -> 689690553411,
    //     t48 -> 747539774105, t49 -> 333251241537, t50 -> 319666061385,
    //     t51 -> 902238351762, t52 -> 509977186608, t53 -> 866995750471,
    //     t54 -> 438772803407, t55 -> 804801178354, t56 -> 494896423285,
    //     t57 -> 398770279697, t58 -> 968235143597, t59 -> 651879837201,
    //     t60 -> 88704982200, t61 -> 907824910546, t62 -> 417201461233,
    //     t63 -> 412808240326, t64 -> 338552587652, t65 -> 594761414109,
    //     t66 -> 980845752326, t67 -> 747713066792, t68 -> 380703947658,
    //     t69 -> 244355434689, t70 -> 96556576129, t71 -> 910729500263,
    //     t72 -> 553086572008, t73 -> 520133570048, t74 -> 862271980110,
    //     t75 -> 616651075483, t76 -> 186007490478, t77 -> 320852201883,
    //     t78 -> 720491588957, t79 -> 955627837043, t80 -> 960549749599,
    //     t81 -> 74165402318, t82 -> 247142697602, t83 -> 190324758337,
    //     t84 -> 289733063077, t85 -> 874434811428, t86 -> 757702509445,
    //     t87 -> 226970576255, t88 -> 727286533851, t89 -> 237482384349,
    //     t90 -> 871722331542, t91 -> 503038160957, t92 -> 918976490931,
    //     t93 -> 354255325122, t94 -> 928969634439, t95 -> 595019756325,
    //     t96 -> 646598569617, t97 -> 149922651260, t98 -> 990263850302,
    //     t99 -> 121176137522, t100 -> 821460780286, t101 -> 854160166905,
    //     t102 -> 1042389822573, t103 -> 352140227718, t104 -> 476833122594,
    //     t105 -> 844533416216, t106 -> 744856296482, t107 -> 911950708561,
    //     t108 -> 391268661733, t109 -> 809405206649, t110 -> 438906947935,
    //     t111 -> 591847674965, t112 -> 883243026366, t113 -> 300299787003,
    //     t114 -> 912625067974, t115 -> 607701786828, t116 -> 738682555021,
    //     t117 -> 167894657617, t118 -> 362763982807, t119 -> 962523186502,
    //     t120 -> 149010455859, t121 -> 104349671874, t122 -> 674847551834,
    //     t123 -> 758981523055, t124 -> 344434894210, t125 -> 1019810041291,
    //     t126 -> 417964755719, t127 -> 599730394336, t128 -> 643138554094,
    //     t129 -> 556388080087, t130 -> 932667059824, t131 -> 707883145182,
    //     t132 -> 577847621647, t133 -> 990066125134, t134 -> 1006980377188,
    //     t135 -> 602098276675, t136 -> 1029271264792, t137 -> 803043694562,
    //     t138 -> 208675478076, t139 -> 705177618265, t140 -> 478765404824,
    //     t141 -> 74817250799, t142 -> 490990997902, t143 -> 834413910018,
    //     t144 -> 954317047637, t145 -> 655211037915, t146 -> 895802434343,
    //     t147 -> 540130027260, t148 -> 236417378144, t149 -> 611310691865,
    //     t150 -> 607879893387, t151 -> 108425700041, t152 -> 980400595652,
    //     t153 -> 766016308022, t154 -> 489844657418, t155 -> 396071703638,
    //     t156 -> 807030400087, t157 -> 140887411360, t158 -> 842526296976,
    //     t159 -> 451246018223, t160 -> 1035713668229, t161 -> 1024465071944,
    //     t162 -> 807183152209, t163 -> 317029815616, t164 -> 932300745641,
    //     t165 -> 746148393564, t166 -> 70682086744, t167 -> 516969531046,
    //     t168 -> 378497084163, t169 -> 71220630606, t170 -> 167231431548,
    //     t171 -> 699109514289, t172 -> 538983723153, t173 -> 170282440526,
    //     t174 -> 426238941377, t175 -> 194938490718, t176 -> 840617845816,
    //     t177 -> 1038072898084, t178 -> 212599721603, t179 -> 736579385631,
    //     t180 -> 947099289282, t181 -> 489192952829, t182 -> 465315915133,
    //     t183 -> 676815450291, t184 -> 321669686958, t185 -> 196417279839,
    //     t186 -> 799758042830, t187 -> 438688495275, t188 -> 1004289201825,
    //     t189 -> 311955071949, t190 -> 935703595419, t191 -> 799345022426,
    //     t192 -> 927764478141, t193 -> 592910811303, t194 -> 256891798702,
    //     t195 -> 879945455304, t196 -> 836473477562, t197 -> 111564805682,
    //     t198 -> 949465531588, t199 -> 966703644946, t200 -> 874919505172,
    //     t201 -> 176786186577, t202 -> 725658257345, t203 -> 1018819737519,
    //     t204 -> 907813804868, t205 -> 77772129384, t206 -> 283274463349,
    //     t207 -> 141174415878, t208 -> 268342804444, t209 -> 1038353011840,
    //     t210 -> 306610349513, t211 -> 353268104719, t212 -> 190036677886,
    //     t213 -> 1008550035007, t214 -> 461406583759, t215 -> 506813919579,
    //     t216 -> 217166201616, t217 -> 937344532137, t218 -> 821948698389,
    //     t219 -> 259627943132, t220 -> 273877655171, t221 -> 58520727645,
    //     t222 -> 1002121940268, t223 -> 776002918604, t224 -> 167458381341,
    //     t225 -> 194774615854, t226 -> 301962277544, t227 -> 894677918993,
    //     t228 -> 1038367527883, t229 -> 715661211922, t230 -> 882717034877,
    //     t231 -> 956084763439, t232 -> 661117535720, t233 -> 207165586364,
    //     t234 -> 124873430295, t235 -> 866247475020, t236 -> 241652355385,
    //     t237 -> 993445296753, t238 -> 871593399150, t239 -> 143544031253,
    //     t240 -> 610238557216, t241 -> 1039504836860, t242 -> 511744308006,
    //     t243 -> 219923438296, t244 -> 856637058891, t245 -> 774999855058,
    //     t246 -> 702678578610, t247 -> 731832751450, t248 -> 418196240967,
    //     t249 -> 79114532933, t250 -> 865885558471, t251 -> 428932072546,
    //     t252 -> 992749265227, t253 -> 579056269000, t254 -> 137516181524,
    //     t255 -> 96748275617, t256 -> 147819889602, t257 -> 445359132531,
    //     t258 -> 452702521171, t259 -> 280004938398, t260 -> 538318578972,
    //     t261 -> 934130532927, t262 -> 567922914748, t263 -> 816757473346,
    //     t264 -> 814940497989, t265 -> 433915701409, t266 -> 937550174034,
    //     t267 -> 229737695669, t268 -> 497582034328, t269 -> 564139090833,
    //     t270 -> 493341410573, t271 -> 833368190564, t272 -> 539283740436,
    //     t273 -> 893403270307, t274 -> 886492804709, t275 -> 695634855072,
    //     t276 -> 552234622976, t277 -> 199101726666, t278 -> 128915951890,
    //     t279 -> 604776386872, t280 -> 909359912842, t281 -> 941135118759,
    //     t282 -> 180668749589, t283 -> 390184566039, t284 -> 745430123993,
    //     t285 -> 1020578978004, t286 -> 650486175578, t287 -> 628402714173,
    //     t288 -> 549729401750, t289 -> 255421772322, t290 -> 826076221824,
    //     t291 -> 592409552336, t292 -> 944561444316, t293 -> 99514712422,
    //     t294 -> 1007049397949, t295 -> 301116822469, t296 -> 909088154524,
    //     t297 -> 590921828616, t298 -> 769181206000, t299 -> 150877302990,
    //     x -> 315844328917588, dx -> -32, y -> 196475852174059, dy -> 161,
    //     z -> 129299668674521, dz -> 251}}

    315844328917588 + 196475852174059 + 129299668674521
}

#[allow(unused)]
pub fn p2() -> usize {
    _p2(include_str!("j24.txt"), false)
}

#[cfg(test)]
#[allow(unused)]
mod j24_tests {
    #[allow(unused)]
    use super::*;

    #[test]
    #[allow(unused)]
    fn test_p1() {
        assert_eq!(2, _p1(include_str!("j24_test.txt"), 7f64, 27f64));
        assert_eq!(27732, _p1(include_str!("j24.txt"),200000000000000f64, 400000000000000f64));
    }

    #[test]
    #[allow(unused)]
    fn test_p2() {
        assert_eq!(47, _p2(include_str!("j24_test.txt"), true));
        assert_eq!(641619849766168, _p2(include_str!("j24.txt"), false));
    }
}